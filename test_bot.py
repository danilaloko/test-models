#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram API
"""

import asyncio
import os
from dotenv import load_dotenv
from providers.provider_manager import ProviderManager
from providers.mock_provider import MockProvider
from providers.hf_api_provider import HFApiProvider
from providers.nsfw_provider import NSFWProvider
from providers.flux_provider import FluxProvider

async def test_providers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    manager = ProviderManager()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    manager.register_provider('mock', MockProvider())
    manager.register_provider('hf_api', HFApiProvider())
    manager.register_provider('nsfw', NSFWProvider())
    manager.register_provider('flux', FluxProvider())
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
    mock_success = await manager.initialize_provider('mock')
    print(f"Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {'‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' if mock_success else '‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    print("\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    provider_status = manager.get_provider_status()
    for provider_id, status_info in provider_status.items():
        provider = manager.get_provider(provider_id)
        print(f"{status_info['status']} {provider.get_name()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    available_providers = manager.get_available_providers()
    print(f"\nüéØ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(available_providers)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω)
    if 'mock' in available_providers:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
        test_prompt = "beautiful landscape with mountains and lake"
        
        try:
            result = await manager.generate_image('mock', test_prompt)
            
            if result['success']:
                print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print(f"üìÅ –§–∞–π–ª: {result['image_path']}")
                print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result['metadata']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    for provider_id, provider in manager.providers.items():
        if provider_id == 'mock':
            continue  # Mock —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω
            
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {provider.get_name()}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        status_before = manager.get_provider_status()[provider_id]
        print(f"–°—Ç–∞—Ç—É—Å –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {status_before['status']}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        try:
            success = await manager.initialize_provider_lazy(provider_id)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            status_after = manager.get_provider_status()[provider_id]
            print(f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {status_after['status']}")
            
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def test_mock_provider_only():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    mock_provider = MockProvider()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    success = await mock_provider.initialize()
    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ' if success else '‚ùå'}")
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        test_prompts = [
            "beautiful sunset over ocean",
            "cute cat sitting on a windowsill",
            "futuristic city with flying cars",
            "abstract art with vibrant colors"
        ]
        
        for i, prompt in enumerate(test_prompts, 1):
            print(f"\nüé® –¢–µ—Å—Ç {i}: {prompt}")
            
            result = await mock_provider.generate_image(
                prompt,
                width=512,
                height=512
            )
            
            if result['success']:
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {result['image_path']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    hf_token = os.getenv("HF_TOKEN")
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    print(f"üîë HF_TOKEN: {'‚úÖ' if hf_token else '‚ùå'}")
    print(f"üîë TELEGRAM_BOT_TOKEN: {'‚úÖ' if telegram_token else '‚ùå'}")
    
    if not hf_token:
        print("\n‚ö†Ô∏è HF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥—É—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã.")
        asyncio.run(test_mock_provider_only())
    else:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        asyncio.run(test_providers())

if __name__ == "__main__":
    main()
