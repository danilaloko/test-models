"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import asyncio
from typing import Dict, Optional, List
from .base_provider import BaseProvider

class ProviderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    def __init__(self):
        self.providers: Dict[str, BaseProvider] = {}
        self.initialization_status: Dict[str, bool] = {}
        self.initialization_in_progress: Dict[str, bool] = {}
    
    def register_provider(self, provider_id: str, provider: BaseProvider) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            provider_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if provider_id in self.providers:
                print(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–º–µ–Ω—è–µ–º...")
            
            self.providers[provider_id] = provider
            self.initialization_status[provider_id] = False
            self.initialization_in_progress[provider_id] = False
            print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} ({provider.get_name()}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_id}: {e}")
            return False
    
    def unregister_provider(self, provider_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            provider_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if provider_id in self.providers:
            del self.providers[provider_id]
            if provider_id in self.initialization_status:
                del self.initialization_status[provider_id]
            if provider_id in self.initialization_in_progress:
                del self.initialization_in_progress[provider_id]
            print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} —É–¥–∞–ª–µ–Ω")
            return True
        return False
    
    def get_provider(self, provider_id: str) -> Optional[BaseProvider]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        
        Args:
            provider_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ None
        """
        return self.providers.get(provider_id)
    
    def get_all_providers(self) -> Dict[str, BaseProvider]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
        return self.providers.copy()
    
    def get_available_providers(self) -> Dict[str, BaseProvider]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
        return {
            provider_id: provider 
            for provider_id, provider in self.providers.items()
            if provider.is_available()
        }
    
    async def initialize_provider_lazy(self, provider_id: str) -> bool:
        """
        –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        
        Args:
            provider_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        if provider_id not in self.providers:
            print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        if self.initialization_status.get(provider_id, False):
            return True
        
        # –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∂–¥–µ–º
        if self.initialization_in_progress.get(provider_id, False):
            print(f"‚è≥ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...")
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            while self.initialization_in_progress.get(provider_id, False):
                await asyncio.sleep(0.1)
            return self.initialization_status.get(provider_id, False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        return await self.initialize_provider(provider_id)
    
    async def initialize_provider(self, provider_id: str) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            provider_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        if provider_id not in self.providers:
            print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        provider = self.providers[provider_id]
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å
        self.initialization_in_progress[provider_id] = True
        
        try:
            print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_id}...")
            success = await provider.initialize()
            self.initialization_status[provider_id] = success
            
            if success:
                print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_id}")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {provider_id}: {e}")
            self.initialization_status[provider_id] = False
            return False
        finally:
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            self.initialization_in_progress[provider_id] = False
    
    async def initialize_all_providers(self) -> Dict[str, bool]:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        tasks = []
        provider_ids = list(self.providers.keys())
        
        for provider_id in provider_ids:
            task = asyncio.create_task(self.initialize_provider(provider_id))
            tasks.append((provider_id, task))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = {}
        for provider_id, task in tasks:
            try:
                result = await task
                results[provider_id] = result
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {provider_id}: {e}")
                results[provider_id] = False
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for success in results.values() if success)
        total = len(results)
        
        print(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{total} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        
        return results
    
    def get_provider_status(self) -> Dict[str, Dict[str, any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        """
        status = {}
        
        for provider_id, provider in self.providers.items():
            is_initialized = self.initialization_status.get(provider_id, False)
            is_initializing = self.initialization_in_progress.get(provider_id, False)
            
            status[provider_id] = {
                "name": provider.get_name(),
                "description": provider.get_description(),
                "is_available": provider.is_available() if is_initialized else False,
                "is_initialized": is_initialized,
                "is_initializing": is_initializing,
                "status": self._get_provider_status_text(provider_id, is_initialized, is_initializing)
            }
        
        return status
    
    def _get_provider_status_text(self, provider_id: str, is_initialized: bool, is_initializing: bool) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            is_initialized: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            is_initializing: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        """
        if is_initializing:
            return "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
        elif is_initialized:
            provider = self.providers.get(provider_id)
            if provider and provider.is_available():
                return "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
            else:
                return "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            return "‚è∏Ô∏è –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    
    def get_provider_info(self, provider_id: str) -> Optional[Dict[str, any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        
        Args:
            provider_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –∏–ª–∏ None
        """
        if provider_id not in self.providers:
            return None
        
        provider = self.providers[provider_id]
        
        info = {
            "id": provider_id,
            "name": provider.get_name(),
            "description": provider.get_description(),
            "is_available": provider.is_available(),
            "is_initialized": self.initialization_status.get(provider_id, False)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if hasattr(provider, 'get_available_models'):
            info["available_models"] = provider.get_available_models()
        
        if hasattr(provider, 'get_current_model'):
            info["current_model"] = provider.get_current_model()
        
        if hasattr(provider, 'get_device'):
            info["device"] = provider.get_device()
        
        if hasattr(provider, 'get_available_loras'):
            info["available_loras"] = provider.get_available_loras()
        
        if hasattr(provider, 'get_current_lora'):
            info["current_lora"] = provider.get_current_lora()
        
        return info
    
    async def generate_image(self, provider_id: str, prompt: str, **kwargs) -> Dict[str, any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            prompt: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        provider = self.get_provider(provider_id)
        
        if not provider:
            return {
                "success": False,
                "error": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.initialization_status.get(provider_id, False):
            success = await self.initialize_provider_lazy(provider_id)
            if not success:
                return {
                    "success": False,
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id}"
                }
        
        if not provider.is_available():
            return {
                "success": False,
                "error": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        
        return await provider.generate_image(prompt, **kwargs)
    
    def list_providers(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return list(self.providers.keys())
    
    def get_provider_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return len(self.providers)
    
    def get_available_provider_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return len(self.get_available_providers())
