"""
–ü—Ä–æ–≤–∞–π–¥–µ—Ä-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import os
import asyncio
import random
from typing import Dict, Any, Optional
from PIL import Image, ImageDraw, ImageFont
import textwrap

from .base_provider import BaseProvider

class MockProvider(BaseProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        super().__init__(
            name="Mock Provider",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
        )
        self.available_models = [
            "mock-stable-diffusion-v1",
            "mock-flux-dev",
            "mock-nsfw-v2",
            "mock-dalle-3"
        ]
        self.current_model = self.available_models[0]
        self.generation_delay = 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞-–∑–∞–≥–ª—É—à–∫–∏"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await asyncio.sleep(0.5)
            
            self.is_initialized = True
            print(f"‚úÖ {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {self.name}: {e}")
            return False
    
    async def generate_image(self, prompt: str, **kwargs) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            prompt: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
                - width: int - —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 512)
                - height: int - –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 512)
                - model: str - –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        if not self.is_available():
            return {
                "success": False,
                "error": "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            width = kwargs.get("width", 512)
            height = kwargs.get("height", 512)
            model = kwargs.get("model", self.current_model)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            width = min(max(width, 256), 1024)
            height = min(max(height, 256), 1024)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            image_path = self._generate_filename(prompt)
            
            print(f"üé® [MOCK] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {model}...")
            print(f"üìù [MOCK] –ü—Ä–æ–º–ø—Ç: {prompt}")
            print(f"‚è≥ [MOCK] –ò–º–∏—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ({self.generation_delay}—Å)...")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await asyncio.sleep(self.generation_delay)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await self._run_sync_in_async(
                self._generate_mock_image,
                prompt=prompt,
                width=width,
                height=height,
                model=model,
                image_path=image_path
            )
            
            print(f"‚úÖ [MOCK] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
            
            return {
                "success": True,
                "image_path": image_path,
                "metadata": {
                    "model": model,
                    "prompt": prompt,
                    "width": width,
                    "height": height,
                    "provider": self.name,
                    "is_mock": True,
                    "generation_time": self.generation_delay
                }
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {self.name}: {str(e)}"
            print(f"‚ùå [MOCK] {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def _generate_mock_image(self, prompt: str, width: int, height: int, model: str, image_path: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
            image = Image.new('RGB', (width, height), color='white')
            draw = ImageDraw.Draw(image)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            for y in range(height):
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
                r = int(50 + (y / height) * 100)
                g = int(50 + (y / height) * 50)
                b = int(150 + (y / height) * 100)
                draw.line([(0, y), (width, y)], fill=(r, g, b))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
            draw.rectangle([10, 10, width-10, height-10], outline=(255, 255, 255), width=3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font_large = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24)
                font_small = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
            except:
                # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                font_large = ImageFont.load_default()
                font_small = ImageFont.load_default()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = f"Mock Image - {model}"
            title_bbox = draw.textbbox((0, 0), title, font=font_large)
            title_width = title_bbox[2] - title_bbox[0]
            title_x = (width - title_width) // 2
            draw.text((title_x, 30), title, fill=(255, 255, 255), font=font_large)
            
            # –ü—Ä–æ–º–ø—Ç (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π)
            wrapped_prompt = textwrap.fill(prompt, width=40)
            prompt_lines = wrapped_prompt.split('\n')
            
            # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
            text_y = 80
            for line in prompt_lines:
                line_bbox = draw.textbbox((0, 0), line, font=font_small)
                line_width = line_bbox[2] - line_bbox[0]
                line_x = (width - line_width) // 2
                draw.text((line_x, text_y), line, fill=(255, 255, 255), font=font_small)
                text_y += 25
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            # –ö—Ä—É–≥–∏ –≤ —É–≥–ª–∞—Ö
            circle_radius = 20
            draw.ellipse([20, 20, 20 + circle_radius*2, 20 + circle_radius*2], 
                        outline=(255, 255, 255), width=2)
            draw.ellipse([width-40, 20, width-40 + circle_radius*2, 20 + circle_radius*2], 
                        outline=(255, 255, 255), width=2)
            draw.ellipse([20, height-40, 20 + circle_radius*2, height-40 + circle_radius*2], 
                        outline=(255, 255, 255), width=2)
            draw.ellipse([width-40, height-40, width-40 + circle_radius*2, height-40 + circle_radius*2], 
                        outline=(255, 255, 255), width=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è "—à—É–º–∞"
            for _ in range(50):
                x = random.randint(0, width)
                y = random.randint(0, height)
                color = (random.randint(100, 255), random.randint(100, 255), random.randint(100, 255))
                draw.point((x, y), fill=color)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ
            size_info = f"{width}x{height}"
            size_bbox = draw.textbbox((0, 0), size_info, font=font_small)
            size_width = size_bbox[2] - size_bbox[0]
            size_x = (width - size_width) // 2
            draw.text((size_x, height - 40), size_info, fill=(255, 255, 255), font=font_small)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image.save(image_path, 'PNG')
            
        except Exception as e:
            print(f"‚ùå [MOCK] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            simple_image = Image.new('RGB', (width, height), color=(100, 150, 200))
            simple_image.save(image_path, 'PNG')
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.is_initialized
    
    def set_model(self, model: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if model in self.available_models:
            self.current_model = model
            return True
        return False
    
    def get_available_models(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return self.available_models.copy()
    
    def get_current_model(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å"""
        return self.current_model
    
    def set_generation_delay(self, delay: float):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.generation_delay = max(0.1, delay)
    
    def get_generation_delay(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return self.generation_delay
